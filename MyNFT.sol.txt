``solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyNFT is ERC721URIStorage, Ownable {
    uint256 public nextTokenId;
    event Minted(address indexed to, uint256 indexed tokenId, string uri);

    constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {}

    function mint(address to, string calldata tokenURI) external onlyOwner returns (uint256) {
        uint256 tokenId = nextTokenId;
        nextTokenId++;
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, tokenURI);
        emit Minted(to, tokenId, tokenURI);
        return tokenId;
    }

    function batchMint(address[] calldata recipients, string[] calldata uris) external onlyOwner {
        require(recipients.length == uris.length, "arrays mismatch");
        for (uint i = 0; i < recipients.length; i++) {
            mint(recipients[i], uris[i]);
        }
    }
}
```

---


